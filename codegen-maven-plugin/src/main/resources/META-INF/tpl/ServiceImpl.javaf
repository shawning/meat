package ${basePackage}.service.impl;

import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;

import ${basePackage}.mapper.${tbl.entityName}Mapper;
import ${basePackage}.entity.${tbl.entityName};
import ${basePackage}.service.${tbl.entityName}Service;
import ${basePackage}.vo.${tbl.entityName}Vo;
import com.youlai.common.result.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.Arrays;
import java.util.List;

import static com.youlai.common.result.ResultCode.DATA_IS_NULL;
import static com.youlai.common.result.ResultCode.PARAM_ERROR;

import java.util.Date;

/**
 * ${tbl.comment}管理
 * @author ${author}
 */

@Slf4j
@Service
public class ${tbl.entityName}ServiceImpl extends ServiceImpl<${tbl.entityName}Mapper, ${tbl.entityName}> implements ${tbl.entityName}Service {


    @Autowired
    private RedisService redisService;

    @Override
    public Result list(${tbl.entityName}Vo ${tbl.propsName}Vo) {
        if (${tbl.propsName}Vo == null) {
            return Result.success(baseMapper.selectPage(new Page<>(), Wrappers.emptyWrapper()));
        }
        Page page = new Page<>(${tbl.propsName}Vo.getCurrentPage(), ${tbl.propsName}Vo.getPageSize());
        LambdaQueryWrapper<${tbl.entityName}> queryWrapper = new LambdaQueryWrapper<>();
        <#list tbl.fields as field>
        <#if field.propsName!='id'
        &&field.propsName!='isAvailable'
        &&field.propsName!='createName'
        &&field.propsName!='createByName'
        &&field.propsName!='updateByName'
        &&field.propsName!='updateName'
        &&field.propsName!='createTime'
        &&field.propsName!='createDate'
        &&field.propsName!='updateTime'
        &&field.propsName!='updateDate'
        &&field.propsName!='createBy'
        &&field.propsName!='updateBy'>
        <#if field.dbColumnType.type=='String'>
        if(StringUtils.isNotBlank(${tbl.propsName}Vo.get${field.entityName}())){
            queryWrapper.like(${tbl.entityName}::get${field.entityName}, ${tbl.propsName}Vo.get${field.entityName}());
        }
        <#else>
        if(${tbl.propsName}Vo.get${field.entityName}() != null){
            queryWrapper.eq(${tbl.entityName}::get${field.entityName}, ${tbl.propsName}Vo.get${field.entityName}());
        }
        </#if>
        </#if>
        </#list>
        IPage<${tbl.entityName}> result = baseMapper.selectPage(page,queryWrapper);
        return Result.success(result.getRecords(),result.getTotal());
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public Result add(@NonNull ${tbl.entityName} ${tbl.propsName}) {
        if (${tbl.propsName} == null){
            return Result.failed(PARAM_ERROR);
        }
        <#list tbl.fields as field>
        <#if field.propsName=='createBy'>
        ${tbl.propsName}.setCreateBy(redisService.getUserId());
        </#if>
        <#if field.propsName=='createByName'>
        ${tbl.propsName}.setCreateByName(redisService.getUserName());
        </#if>
        <#if field.propsName=='createDate'>
        ${tbl.propsName}.setCreateDate(new Date());
        </#if>
        </#list>
        ${tbl.propsName}.setIsAvailable(1);
        return Result.judge(baseMapper.insert(${tbl.propsName}));
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public Result update(${tbl.entityName} ${tbl.propsName}) {
        Long id = ${tbl.propsName}.getId();
        if (id == null) {
            return Result.failed(PARAM_ERROR);
        }
        ${tbl.entityName} ${tbl.propsName}New = baseMapper.selectById(${tbl.propsName}.getId());
        if(${tbl.propsName}New == null){
            return Result.failed(DATA_IS_NULL);
        }
        <#list tbl.fields as field>
        <#if field.propsName=='updateBy'>
        ${tbl.propsName}New.setUpdateBy(redisService.getUserId());
        </#if>
        <#if field.propsName=='updateByName'>
        ${tbl.propsName}New.setUpdateByName(redisService.getUserName());
        </#if>
        <#if field.propsName=='updateDate'>
        ${tbl.propsName}New.setUpdateDate(new Date());
        </#if>
        </#list>
        return Result.judge(baseMapper.updateById(${tbl.propsName}));
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public Result delete(@NonNull String ids) {
        List<String> idList = Arrays.asList(ids.split(","));
        return Result.judge(baseMapper.deleteBatchIds(idList));
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public Result delete(@NonNull Long id) {
        return Result.judge(baseMapper.deleteById(id));
    }

    @Override
    public Result detail(@NonNull Long id){
        QueryWrapper<${tbl.entityName}> query = new QueryWrapper<>();
        query.eq("ID", id);
        query().eq("IS_AVLIABLE",1);
        return Result.success(baseMapper.selectOne(query));
    }
}
